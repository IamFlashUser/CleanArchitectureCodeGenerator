@page "/pages/{nameofplurallowercase}/view/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.DTOs
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Queries.GetById
@inherits MudComponentBase
@inject IStringLocalizer<{nameofPlural}> L
@attribute [Authorize(Policy = Permissions.{nameofPlural}.View)]
<PageTitle>@Title</PageTitle>
<Breadcrumbs  OnGoEditClick="GoEdit" OnDeleteClick="Delete" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Large">
@if (_model != null)
{
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Spacing="3" Class="readonly-grid">
                {readonlyFieldDefinition}
            </MudGrid>
        </MudCardContent>
        <MudCardActions></MudCardActions>
    </MudCard>
 }
</MudContainer>
 

@code {
    public string? Title { get; private set; }
    [Parameter]
    public int Id { get; set; }
    private List<BreadcrumbItem>? _breadcrumbItems; 
    private {itemname}Dto? _model;
    protected override async Task OnInitializedAsync()
    {
        Title = L["{itemname}"];
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(L["Home"], href: "/"),
            new BreadcrumbItem(L["{nameofPlural}"], href: "/pages/{nameofplurallowercase}")
        };
        var result = await Mediator.Send(new Get{itemname}ByIdQuery() { Id = Id });
        result.Map(data =>
        {
            _model = data;
            return data;
        }).Match(data =>
        {
            _breadcrumbItems.Add(new BreadcrumbItem(data.Name, null, disabled: true));
        }, errors =>
        {
            Snackbar.Add(errors, MudBlazor.Severity.Error);
        });

    }
    void GoEdit()
    {
        Navigation.NavigateTo($"/pages/{nameofPlural}/edit/{Id}");
    }
    async Task Delete()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, _model.Name);
        var command = new Delete{itemname}Command(new int[] { _model.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(() =>
            {
                Navigation.NavigateTo($"/pages/{nameofPlural}");
            });
        });
    }
}
