@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<{nameofPlural}> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_{itemnamelowercase}Form" Validation="@(Validator.ValidateValue(_model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                {mudFormFieldDefinition}
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="OnSaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="OnSubmit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm _{itemnamelowercase}Form = new();
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    [EditorRequired] [Parameter] public AddEdit{itemname}Command _model { get; set; } = null!;
    async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _{itemnamelowercase}Form.Validate().ConfigureAwait(false);
            if (!_{itemnamelowercase}Form.IsValid)
                return;
            var result = await Mediator.Send(_model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task OnSaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _{itemnamelowercase}Form.Validate().ConfigureAwait(false);
            if (!_{itemnamelowercase}Form.IsValid)
               return;
            var result = await Mediator.Send(_model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                _model = new AddEdit{itemname}Command() { };
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}