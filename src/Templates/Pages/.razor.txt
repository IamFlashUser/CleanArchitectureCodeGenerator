@page "/pages/{nameofplurallowercase}"

@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Caching
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.DTOs
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Specifications
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.{nameofPlural}.Components

@inject IStringLocalizer<{nameofPlural}> L
@inject BlazorDownloadFileService BlazorDownloadFileService

@attribute [Authorize(Policy = Permissions.{nameofPlural}.View)]
<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
                  FixedHeader="true"
                  FixedFooter="false"
                  Virtualize="false"
                  @bind-RowsPerPage="_defaultPageSize"
                  Loading="@_loading"
                  MultiSelection="true"
                  T="{itemname}Dto"
                  SelectOnRowClick="false"
                  RowClick="@(s=>OnDataGridRowClick(s.Item))"
                  @bind-SelectedItems="_selected{nameofPlural}"
                  Hover="true" @ref="_{nameofplurallowercase}Grid">
            <ToolBarContent>
                 <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="{itemname}ListView" ValueChanged="OnListViewChanged" Value="_{nameofplurallowercase}Query.ListView" Dense="true" Label="@L["List View"]">
                    </MudEnumSelect>
                </MudStack>
            </MudStack>
            <MudStack Spacing="2" AlignItems="AlignItems.End">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                    <MudButton Disabled="@_loading"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Outlined.Refresh">
                        @AppStrings.Refresh
                    </MudButton>
                    @if (_accessRights.Create)
                    {
                        <MudButton StartIcon="@Icons.Material.Outlined.Add"
                                   OnClick="OnCreate">
                            @AppStrings.New
                        </MudButton>
                    }
                    @if (_accessRights.Delete)
                    {
                            <MudButton Disabled="@(!(_selected{nameofPlural}.Count > 0))"
                                       StartIcon="@Icons.Material.Outlined.DeleteOutline"
                                         OnClick="OnDeleteSelected{nameofPlural}">
                                @AppStrings.Delete
                            </MudButton>
                    }
                    <MudMenu TransformOrigin="Origin.BottomRight" AnchorOrigin="Origin.BottomRight" EndIcon="@Icons.Material.Filled.MoreVert" Label="@AppStrings.More">
                        @if (_accessRights.Clone)
                        {
                            <MudMenuItem Disabled="@(_selected{nameofPlural}.Count != 1)" OnClick="OnClone{itemname}">@AppStrings.Clone</MudMenuItem>
                        }
                        
                        @if (_accessRights.Export)
                        {
                            <MudMenuItem Disabled="@_exporting"
                                         OnClick="OnExport">
                                @AppStrings.Export
                            </MudMenuItem>
                        }
                        @if (_accessRights.Import)
                        {
                            <MudMenuItem>
                                <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx">
                                    <ActivatorContent>
                                        <MudButton Class="pa-0 ma-0" Style="font-weight:400;text-transform:none;"
                                                   Variant="Variant.Text"
                                                   Disabled="@_uploading">
                                            @AppStrings.Import
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudStack>
                <MudStack Row Spacing="1">
                    @if (_accessRights.Search)
                    {
                        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@_{nameofplurallowercase}Query.Keyword" Placeholder="@AppStrings.Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                        </MudTextField>
                    }
                </MudStack>
            </MudStack>
        </MudStack>
            </ToolBarContent>
            <Columns>
                <SelectColumn ShowInFooter="false"></SelectColumn>
                <TemplateColumn HeaderStyle="width:60px" Title="@AppStrings.Actions" Sortable="false">
                    <CellTemplate>
                        @if (_accessRights.Edit || _accessRights.Delete)
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Size="Size.Small"
                                     Dense="true"
                                     EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                                @if (_accessRights.Edit)
                                {
                                    <MudMenuItem OnClick="@(()=>OnEdit{itemname}(context.Item))">@AppStrings.Edit</MudMenuItem>
                                }
                                @if (_accessRights.Delete)
                                {
                                    <MudMenuItem OnClick="@(()=>OnDelete{itemname}(context.Item))">@AppStrings.Delete</MudMenuItem>
                                }
                            </MudMenu>
                        }
                        else
                        {
                            <MudTooltip Text="@AppStrings.NoAllowed" Delay="300">
                                <MudIconButton Variant="Variant.Outlined"  
                                               Disabled="true"
                                               Icon="@Icons.Material.Filled.DoNotTouch"
                                               Size="Size.Small"
                                               Color="Color.Surface">
                                    @AppStrings.NoAllowed
                                </MudIconButton>
                            </MudTooltip>
                        }
                    </CellTemplate>
                </TemplateColumn>
                {mudTdHeaderDefinition}
            </Columns>
            <NoRecordsContent>
                <MudText>@AppStrings.NoRecords</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@AppStrings.Loading</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<{itemname}Dto> _selected{nameofPlural} = new HashSet<{itemname}Dto>();
    private MudDataGrid<{itemname}Dto> _{nameofplurallowercase}Grid = default!;
    private {itemname}Dto _{itemnamelowercase}Dto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }


    private {nameofPlural}WithPaginationQuery _{nameofplurallowercase}Query { get; set; } = new();
    private {nameofPlural}AccessRights _accessRights = new();

    protected override async Task OnInitializedAsync()
    {
        Title = L[_{itemnamelowercase}Dto.GetClassDescription()];
        _accessRights = await PermissionService.GetAccessRightsAsync<{nameofPlural}AccessRights>(); 
    }
     
    private async Task<GridData<{itemname}Dto>> ServerReload(GridState<{itemname}Dto> state)
    {
        try
        {
            _loading = true;
            _{nameofplurallowercase}Query.CurrentUser = UserProfile;
            var sortDefinition = state.SortDefinitions.FirstOrDefault();
            _{nameofplurallowercase}Query.OrderBy = sortDefinition?.SortBy ?? "Id";
            _{nameofplurallowercase}Query.SortDirection = (sortDefinition != null && sortDefinition.Descending)
                                      ? SortDirection.Descending.ToString()
                                      : SortDirection.Ascending.ToString();
            _{nameofplurallowercase}Query.PageNumber = state.Page + 1;
            _{nameofplurallowercase}Query.PageSize = state.PageSize;
            var result = await Mediator.Send(_{nameofplurallowercase}Query).ConfigureAwait(false);
            return new GridData<{itemname}Dto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selected{nameofPlural}.Clear();
        _{nameofplurallowercase}Query.Keyword = text;
        await _{nameofplurallowercase}Grid.ReloadServerData();
    }
    private async Task OnListViewChanged({itemname}ListView listview)
    {
        _{nameofplurallowercase}Query.ListView = listview;
        await _{nameofplurallowercase}Grid.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        {itemname}CacheKey.Refresh();
        _selected{nameofPlural}.Clear();
        _{nameofplurallowercase}Query.Keyword  = string.Empty;
        await _{nameofplurallowercase}Grid.ReloadServerData();
    }
    private Task ShowEditFormDialog(string title, AddEdit{itemname}Command command)
    {
        return DialogServiceHelper.ShowFormDialogAsync<{itemname}FormDialog, AddEdit{itemname}Command>(
            title,
            new DialogParameters<{itemname}FormDialog>()
			{
				{x => x._model, command }
			},
            async () =>
            {
                await _{nameofplurallowercase}Grid.ReloadServerData();
                _selected{nameofPlural}.Clear();
            });
    }
    private void OnDataGridRowClick({itemname}Dto dto)
    {
        Navigation.NavigateTo($"/pages/{nameofplurallowercase}/view/{dto.Id}");
    }
    private Task OnCreate()
    {
        var command = new AddEdit{itemname}Command();
        return ShowEditFormDialog(L["New {itemname}"], command);
    }
    private Task OnClone{itemname}()
    {
        var dto = _selected{nameofPlural}.First();
        var command = new AddEdit{itemname}Command()
        {
            {fieldAssignmentDefinition}
        };
        return ShowEditFormDialog(L["Clone {itemname}"], command);
    }
    private Task OnEdit{itemname}({itemname}Dto dto)
    {
       //var command = Mapper.Map<AddEdit{itemname}Command>(dto);
       //return ShowEditFormDialog(L["Edit {itemname}"], command);
       Navigation.NavigateTo($"/pages/{nameofplurallowercase}/edit/{dto.Id}");
       return Task.CompletedTask;
    }

    private Task OnDelete{itemname}({itemname}Dto dto)
    {
        var contentText = string.Format(AppStrings.DeleteConfirmation, dto.Name);
        var command = new Delete{itemname}Command(new int[] { dto.Id });
        return Delete{nameofPlural}Internal(command, contentText); 
    }

    private Task OnDeleteSelected{nameofPlural}()
    {
        var contentText = string.Format(AppStrings.DeleteConfirmWithSelected, _selected{nameofPlural}.Count);
        var command = new Delete{itemname}Command(_selected{nameofPlural}.Select(x => x.Id).ToArray());
        return Delete{nameofPlural}Internal(command, contentText);
    }

    private Task Delete{nameofPlural}Internal(Delete{itemname}Command command, string contentText)
    {
        return DialogServiceHelper.ShowDeleteConfirmationDialogAsync(
            command,
            AppStrings.DeleteConfirmationTitle,
            contentText,
            async () =>
            {
                await _{nameofplurallowercase}Grid.ReloadServerData();
                _selected{nameofPlural}.Clear();
            });
    }


    private async Task OnExport()
    {
        _exporting = true;
        var request = new Export{nameofPlural}Query()
            {
                Keyword = _{nameofplurallowercase}Query.Keyword,
                CurrentUser = UserProfile,
                ListView = _{nameofplurallowercase}Query.ListView,
                OrderBy = _{nameofplurallowercase}Grid.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_{nameofplurallowercase}Grid.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
            };
        var result = await Mediator.Send(request);
        await result.MatchAsync(
            async data =>
            {
                await BlazorDownloadFileService.DownloadFileAsync($"{L["{nameofPlural}"]}.xlsx", result.Data, contentType:"application/octet-stream");
                Snackbar.Add($"{AppStrings.ExportSuccess}", MudBlazor.Severity.Info);
            },
            errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new Import{nameofPlural}Command(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        await result.MatchAsync(
            async data =>
            {
                await _{nameofplurallowercase}Grid.ReloadServerData();
                Snackbar.Add($"{AppStrings.ImportSuccess}", MudBlazor.Severity.Info);
            }, errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _uploading = false;
    }

}
