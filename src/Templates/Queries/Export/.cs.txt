//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       Defines a query to export {itemnamelowercase} data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified {itemnamelowercase} details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class Export{nameofPlural}Query : {itemname}AdvancedFilter, ICacheableRequest<Result<byte[]>>
{
      public {itemname}AdvancedSpecification Specification => new {itemname}AdvancedSpecification(this);
      public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => {itemname}CacheKey.GetExportCacheKey($"{this}");
}
    
public class Export{nameofPlural}QueryHandler :
         IRequestHandler<Export{nameofPlural}Query, Result<byte[]>>
{
        private readonly IMapper _mapper;
        private readonly IApplicationDbContext _context;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<Export{nameofPlural}QueryHandler> _localizer;
        private readonly {itemname}Dto _dto = new();
        public Export{nameofPlural}QueryHandler(
            IMapper mapper,
            IApplicationDbContext context,
            IExcelService excelService,
            IStringLocalizer<Export{nameofPlural}QueryHandler> localizer
            )
        {
            _mapper = mapper;
            _context = context;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(Export{nameofPlural}Query request, CancellationToken cancellationToken)
        {
            var data = await _context.{nameofPlural}.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<{itemname}Dto, object?>>()
                {
                    {exportFuncExpression}
                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
