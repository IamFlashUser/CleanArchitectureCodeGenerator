//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       Defines a query to retrieve all {itemnamelowercase}s from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Mappers;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

public class GetAll{nameofPlural}Query : ICacheableRequest<IEnumerable<{itemname}Dto>>
{
   public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
   public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
}

public class GetAll{nameofPlural}QueryHandler :
     IRequestHandler<GetAll{nameofPlural}Query, IEnumerable<{itemname}Dto>>
{
    private readonly IApplicationDbContext _context;

    public GetAll{nameofPlural}QueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<{itemname}Dto>> Handle(GetAll{nameofPlural}Query request, CancellationToken cancellationToken)
    {
        var data = await _context.{nameofPlural}.ProjectTo()
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


