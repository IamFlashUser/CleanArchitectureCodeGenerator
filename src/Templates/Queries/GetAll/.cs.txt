// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Mappers;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

public class GetAll{nameofPlural}Query : ICacheableRequest<IEnumerable<{itemname}Dto>>
{
   public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
   public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
}

public class GetAll{nameofPlural}QueryHandler :
     IRequestHandler<GetAll{nameofPlural}Query, IEnumerable<{itemname}Dto>>
{
    private readonly IApplicationDbContext _context;

    public GetAll{nameofPlural}QueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<{itemname}Dto>> Handle(GetAll{nameofPlural}Query request, CancellationToken cancellationToken)
    {
        var data = await _context.{nameofPlural}.ProjectTo()
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


