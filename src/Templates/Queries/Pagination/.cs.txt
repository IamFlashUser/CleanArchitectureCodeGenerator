//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       Defines a query for retrieving {itemnamelowercase}s with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class {nameofPlural}WithPaginationQuery : {itemname}AdvancedFilter, ICacheableRequest<PaginatedData<{itemname}Dto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => {itemname}CacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
    public {itemname}AdvancedSpecification Specification => new {itemname}AdvancedSpecification(this);
}
    
public class {nameofPlural}WithPaginationQueryHandler :
         IRequestHandler<{nameofPlural}WithPaginationQuery, PaginatedData<{itemname}Dto>>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        public {nameofPlural}WithPaginationQueryHandler(
            IMapper mapper,
            IApplicationDbContext context)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<PaginatedData<{itemname}Dto>> Handle({nameofPlural}WithPaginationQuery request, CancellationToken cancellationToken)
        {
           var data = await _context.{nameofPlural}.OrderBy($"{request.OrderBy} {request.SortDirection}")
                                                   .ProjectToPaginatedDataAsync<{itemname}, {itemname}Dto>(request.Specification,
                                                    request.PageNumber,
                                                    request.PageSize,
                                                    _mapper.ConfigurationProvider,
                                                    cancellationToken);
            return data;
        }
}