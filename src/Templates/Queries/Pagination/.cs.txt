// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class {nameofPlural}WithPaginationQuery : {itemname}AdvancedFilter, ICacheableRequest<PaginatedData<{itemname}Dto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => {itemname}CacheKey.GetPaginationCacheKey($"{this}");
    public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
    public {itemname}AdvancedSpecification Specification => new {itemname}AdvancedSpecification(this);
}
    
public class {nameofPlural}WithPaginationQueryHandler :
         IRequestHandler<{nameofPlural}WithPaginationQuery, PaginatedData<{itemname}Dto>>
{
        private readonly IApplicationDbContext _context;

        public {nameofPlural}WithPaginationQueryHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<PaginatedData<{itemname}Dto>> Handle({nameofPlural}WithPaginationQuery request, CancellationToken cancellationToken)
        {
           var data = await _context.{nameofPlural}.OrderBy($"{request.OrderBy} {request.SortDirection}")
                                                   .ProjectToPaginatedDataAsync(request.Specification, 
                                                                                request.PageNumber, 
                                                                                request.PageSize, 
                                                                                {itemname}Mapper.ToDto, 
                                                                                cancellationToken);
            return data;
        }
}