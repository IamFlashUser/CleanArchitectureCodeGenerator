// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class Get{itemname}ByIdQuery : ICacheableRequest<Result<{itemname}Dto>>
{
   public required int Id { get; set; }
   public string CacheKey => {itemname}CacheKey.GetByIdCacheKey($"{Id}");
   public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
}

public class Get{itemname}ByIdQueryHandler :
     IRequestHandler<Get{itemname}ByIdQuery, Result<{itemname}Dto>>
{
    private readonly IApplicationDbContext _context;

    public Get{itemname}ByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<{itemname}Dto>> Handle(Get{itemname}ByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.{nameofPlural}.ApplySpecification(new {itemname}ByIdSpecification(request.Id))
                                                .ProjectTo()
                                                .FirstAsync(cancellationToken);
        return await Result<ContactDto>.SuccessAsync(data);
    }
}
