//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       Defines a query to retrieve a {itemnamelowercase} by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same {itemnamelowercase}.
// </auto-generated>
//------------------------------------------------------------------------------

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class Get{itemname}ByIdQuery : ICacheableRequest<Result<{itemname}Dto>>
{
   public required int Id { get; set; }
   public string CacheKey => {itemname}CacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
}

public class Get{itemname}ByIdQueryHandler :
     IRequestHandler<Get{itemname}ByIdQuery, Result<{itemname}Dto>>
{
    private readonly IApplicationDbContext _context;

    public Get{itemname}ByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<{itemname}Dto>> Handle(Get{itemname}ByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.{nameofPlural}.ApplySpecification(new {itemname}ByIdSpecification(request.Id))
                                                .ProjectTo()
                                                .FirstAsync(cancellationToken);
        return await Result<ContactDto>.SuccessAsync(data);
    }
}
