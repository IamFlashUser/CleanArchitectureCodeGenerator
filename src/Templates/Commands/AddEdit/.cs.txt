//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: {author}
// Created/Modified: {createddate}
// Command for adding/editing a {itemnamelowercase} entity with validation, mapping,
// domain events, and cache invalidation.
// Documentation: https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage: Use this command to add or edit a {itemnamelowercase}. Caching and domain event handling are automatic.


using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.DTOs;
namespace {namespace};

public class AddEdit{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
      {dtoFieldDefinition}

      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<{itemname}Dto, AddEdit{itemname}Command>(MemberList.None);
            CreateMap<AddEdit{itemname}Command, {itemname}>(MemberList.None);
        }
    }
}

public class AddEdit{itemname}CommandHandler : IRequestHandler<AddEdit{itemname}Command, Result<int>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContext _context;
    public AddEdit{itemname}CommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _mapper = mapper;
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEdit{itemname}Command request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.{nameofPlural}.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"{itemname} with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
			// raise a update domain event
			item.AddDomainEvent(new {itemname}UpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = _mapper.Map<{itemname}>(request);
            // raise a create domain event
			item.AddDomainEvent(new {itemname}CreatedEvent(item));
            _context.{nameofPlural}.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

