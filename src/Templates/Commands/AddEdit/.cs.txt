//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       This file defines the command for adding or editing a {itemnamelowercase} entity,
//       including validation and mapping operations. It handles domain events
//       and cache invalidation for updated or newly created {itemnamelowercase}.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to add a new {itemnamelowercase} or edit an existing one.
// It handles caching logic and domain event raising automatically.


using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;

namespace {namespace};

public class AddEdit{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
      {dtoFieldDefinition}

      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();
}

public class AddEdit{itemname}CommandHandler : IRequestHandler<AddEdit{itemname}Command, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public AddEdit{itemname}CommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEdit{itemname}Command request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.{nameofPlural}.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"{itemname} with id: [{request.Id}] not found.");
            }
            {itemname}Mapper.ApplyChangesFrom(request,item);
			// raise a update domain event
			item.AddDomainEvent(new {itemname}UpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = {itemname}Mapper.FromEditCommand(request);
            // raise a create domain event
			item.AddDomainEvent(new {itemname}CreatedEvent(item));
            _context.{nameofPlural}.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

