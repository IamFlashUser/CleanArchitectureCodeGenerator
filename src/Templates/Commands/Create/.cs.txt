// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;

namespace {namespace};

public class Create{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
      {dtoFieldDefinition}
      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();
}
    
    public class Create{itemname}CommandHandler : IRequestHandler<Create{itemname}Command, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        public Create{itemname}CommandHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<Result<int>> Handle(Create{itemname}Command request, CancellationToken cancellationToken)
        {
           var item = {itemname}Mapper.FromCreateCommand(request);
           // raise a create domain event
	       item.AddDomainEvent(new {itemname}CreatedEvent(item));
           _context.{nameofPlural}.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

