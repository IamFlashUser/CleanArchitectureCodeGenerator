//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: {author}
// Created/Modified: {createddate}
// Command and handler for creating a new {itemname}.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// Use this command to create a new {itemnamelowercase} with required fields and automatic domain event handling.


using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

public class Create{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
      {dtoFieldDefinition}
      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Create{itemname}Command, {itemname}>(MemberList.None);
        }
    }
}
    
    public class Create{itemname}CommandHandler : IRequestHandler<Create{itemname}Command, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContext _context;
        public Create{itemname}CommandHandler(
            IMapper mapper,
            IApplicationDbContext context)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<Result<int>> Handle(Create{itemname}Command request, CancellationToken cancellationToken)
        {
           var item = _mapper.Map<Contact>(request);
           // raise a create domain event
	       item.AddDomainEvent(new {itemname}CreatedEvent(item));
           _context.{nameofPlural}.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

