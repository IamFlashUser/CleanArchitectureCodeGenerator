//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       This file defines the command and its handler for creating a new {itemname} entity
//       within the CleanArchitecture.Blazor application. The command uses caching
//       invalidation to ensure data consistency and raises domain events to maintain 
//       the integrity of the entity lifecycle. It leverages Clean Architecture principles 
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to create a new {itemnamelowercase} entity in the system. It includes
// the required fields for the {itemnamelowercase} and automatically raises necessary domain
// events for integration with other bounded contexts in the application.

using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;

namespace {namespace};

public class Create{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
      {dtoFieldDefinition}
      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
}
    
    public class Create{itemname}CommandHandler : IRequestHandler<Create{itemname}Command, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        public Create{itemname}CommandHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<Result<int>> Handle(Create{itemname}Command request, CancellationToken cancellationToken)
        {
           var item = {itemname}Mapper.FromCreateCommand(request);
           // raise a create domain event
	       item.AddDomainEvent(new {itemname}CreatedEvent(item));
           _context.{nameofPlural}.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

