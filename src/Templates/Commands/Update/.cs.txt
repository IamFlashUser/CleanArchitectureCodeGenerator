//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       This file defines the Update{itemname}Command and its handler for updating 
//       an existing {itemname} entity within the CleanArchitecture.Blazor application. 
//       It includes caching invalidation logic to maintain data consistency and 
//       raises a domain event upon successful update to notify other parts of the system.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// Use `Update{itemname}Command` to update an existing {itemnamelowercase} entity in the system. 
// The handler ensures that if the entity is found, the changes are applied and 
// the necessary domain event (`{itemname}UpdatedEvent`) is raised. Caching is also 
// invalidated to keep the {itemnamelowercase} list consistent.

using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Mappers;

namespace {namespace};

public class Update{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
        {dtoFieldDefinition}
        public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
        public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();

}

public class Update{itemname}CommandHandler : IRequestHandler<Update{itemname}Command, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public Update{itemname}CommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
    {

       var item = await _context.{nameofPlural}.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"{itemname} with id: [{request.Id}] not found.");
       }
       {itemname}Mapper.ApplyChangesFrom(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new {itemname}UpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

