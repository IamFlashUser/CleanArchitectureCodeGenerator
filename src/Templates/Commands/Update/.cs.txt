//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: {author}
// Created/Modified: {createddate}
// Update{itemname}Command & handler: updates an existing {itemname} with cache invalidation and raises {itemname}UpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

public class Update{itemname}Command: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
      {dtoFieldDefinitionWithoutList}
      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Update{itemname}Command, {itemname}>(MemberList.None);
            CreateMap<{itemname}Dto,Update{itemname}Command>(MemberList.None);
        }
    }

}

public class Update{itemname}CommandHandler : IRequestHandler<Update{itemname}Command, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public Update{itemname}CommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
    {
       await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
       var item = await db.{nameofPlural}.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"{itemname} with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new {itemname}UpdatedEvent(item));
       await db.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

