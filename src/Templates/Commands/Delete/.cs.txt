//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: {author}
//     Created Date: {createddate}
//     Last Modified: {createddate}
//     Description: 
//       This file defines the command and its handler for deleting one or more
//       {itemname} entities from the CleanArchitecture.Blazor application. It
//       implements caching invalidation logic to ensure that data consistency is
//       maintained. Domain events are triggered for deleted entities to support 
//       integration with other parts of the system.
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to delete multiple {nameofPlural} from the system by specifying
// their IDs. The handler also raises domain events for each deleted {itemnamelowercase} to
// notify other bounded contexts and invalidate relevant cache entries.

using {selectns}.{nameofPlural}.Caching;


namespace {namespace};

public class Delete{itemname}Command:  ICacheInvalidatorRequest<Result<int>>
{
  public int[] Id {  get; }
  public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
  public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();
  public Delete{itemname}Command(int[] id)
  {
    Id = id;
  }
}

public class Delete{itemname}CommandHandler : 
             IRequestHandler<Delete{itemname}Command, Result<int>>

{
    private readonly IApplicationDbContext _context;
    public Delete{itemname}CommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(Delete{itemname}Command request, CancellationToken cancellationToken)
    {
        var items = await _context.{nameofPlural}.Where(x=>request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
		    // raise a delete domain event
			item.AddDomainEvent(new {itemname}DeletedEvent(item));
            _context.{nameofPlural}.Remove(item);
        }
        var result = await _context.SaveChangesAsync(cancellationToken);
        return await Result<int>.SuccessAsync(result);
    }

}

