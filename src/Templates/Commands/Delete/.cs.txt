//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: {author}
// Created/Modified: {createddate}
// Command and handler for deleting {itemname} entities.
// Implements cache invalidation and triggers domain events.
// Docs: https://docs.cleanarchitectureblazor.com/features/{itemnamelowercase}
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// Delete multiple {nameofPlural} by specifying their IDs.
// Domain events are raised for each deletion to support cache invalidation.


using {selectns}.{nameofPlural}.Caching;


namespace {namespace};

public class Delete{itemname}Command:  ICacheInvalidatorRequest<Result<int>>
{
  public int[] Id {  get; }
  public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
  public IEnumerable<string>? Tags => {itemname}CacheKey.Tags;
  public Delete{itemname}Command(int[] id)
  {
    Id = id;
  }
}

public class Delete{itemname}CommandHandler : 
             IRequestHandler<Delete{itemname}Command, Result<int>>

{
    private readonly IApplicationDbContext _context;
    public Delete{itemname}CommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(Delete{itemname}Command request, CancellationToken cancellationToken)
    {
        var items = await _context.{nameofPlural}.Where(x=>request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
		    // raise a delete domain event
			item.AddDomainEvent(new {itemname}DeletedEvent(item));
            _context.{nameofPlural}.Remove(item);
        }
        var result = await _context.SaveChangesAsync(cancellationToken);
        return await Result<int>.SuccessAsync(result);
    }

}

